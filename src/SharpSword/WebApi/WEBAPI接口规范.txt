0.命名格式: 业务模块前缀.具体业务.接口动作，比如：前缀在运行的时候，会自动加上去，开发的时候无需将前缀定义在类上面
	Order.Get
	Order.Create
	Order.Update 等等

1.建议统一业务的WEBAPI接口放到一个程序集。在程序集里加接口前缀

2.上送参数的命名格式，采取接口名称去掉中间的.号,在加上RequestDto，每一个接口必须有单独的一个接口上送参数对象，不能使用其他接口上送对象，比如	
	OrderGetRequestDto
	OrderCreateRequestDto

3.下送数据（返回数据对象命名格式）,采取界面名称去掉中间的.号，在加上ResponseDto，下送的数据必须有单独的一个下送数据DTO对象，子对象可以复用（但是不能直接使用数据库表对象），比如：
	OrderGetResponseDto
	OrderCreateResponseDto
  下送数据的返回对象和各个子对象，尽量不要使用数据库实体，而应该独立于数据库表实体。数据流向应该为:数据库数据（或数据实体）->ResponseDto各个对象

4.接口层DTO子对象(亦可以称业务领域对象)，用于在各接口返回值中复用。

5.上述的命名格式无需手工一个一个类去建立，可以直接使用代码模板，在创建类的时候，VS会自动生成上面的各个类，设置请参考文件夹：Api_VS_ItemTemplates

6.客户端SDK（C#），接口框架会根据已经完成的接口，自动生成客户端调用SDK，调用方无需了解具体访问交互过程，上送对象和返回数据对象都会自动生成。调用方只需知道接口名称，就知道调用对象
  是什么（接口名称+Request），比如我需要调用：Order.Get接口，那么SDK调用参数对象就为：OrderCenterOrderGetRequest，至于里面的参数合返回对象，SDK都已经帮我们自动化，完全
  基于对象方式。客户端在调用SDK的时候，由于SDK里的数据全部是对象化了，但是也不建议在具体的业务代码里直接使用客户端SDK里的返回对象和上送对象，最优做法应该建立自己当前业务系统的Model
  数据流向为：当前业务对象-->SDK的RequestDto-->SDK的ResponseDto-->业务对象，应该隔离SDK里的对象，SDK里对象我们应该仅仅将其看成是方便我们开发的工具集。而不应该将SDK对象散布到我们自己
  的业务系统

为什么接口采取.分隔方式命名

0.为了方便扩展，让接口调用方调用接口更加清晰

1.方便接口数据路由,当我们采取SOA方式来公开我们的调用接口的时候，可能我们的Order业务接口和我们的Product业务接口并不在同一服务器环境，但是我们再架构整个的接口体系的时候，我们需要统一
调用入口，比如：我的调动入口只有:http://api.sharpsword.com，那么这里的服务层相当于接口网关(API Getway)，这一层我们根据接口前缀来进行接口的数据路由调用后方不同的业务接口。接口网关
层主要负责，接口授权，接口路由，接口限流等等；在实际的架构里，这一层应该也是一个框架，后续我们将逐步实现这里的API Getway层。来实现入口的统一和接口的安全控制等等。

2.接口版本号是为了让我们自不更改调用方已经实现的调用方式的时候，我们更改服务层的业务逻辑，这样我们再无需更改任何的接口代码，客户端调用方代码，直接复制一个新的接口，将版本号定义成比原始同名接口高即可
，在新的接口里更改业务逻辑，直接将新的业务逻辑DLL放置到接口层bin路径，这样系统框架会自动选择最高版本号的同名接口（当然如果客户端调用方明确指定了接口版本号，那么将会直接使用指定版本的接口）
这样当我们修改的接口出现问题的时候，我们能非常轻松的移除掉新接口DLL，立即使用旧接口。快速实现故障恢复。

接口的设计原则
接口尽量以单独业务作为一个设计，比如：当我们获取商品信息的时候，可能在我们真实的数据库里的设计是，商品信息张个表，商品SKU集合张个表，商品图片信息一张表。。。。，那么我们设计接口的时候
尽量在获取商品详情接口里，将这些信息作为一个业务对象返回。但是业务对象里的数据，不能直接使用数据表对象，而应该独立在接口层面定义出业务实体对象。
设计尽量满足我们实际的业务需求(不要将接口设计成数据库的增删改查，那样是没有任何意义的，接口应该是对业务的封装，调用者只会体会到业务，而不会关心数据存储)
控制接口的粒度，在保证性能的前提下尽量让接口的复用性最大化

接口命名
接口命名一定要非常的慎重，一定要能够真实的反映当前接口的意图（接口的命名非常重要）

接口层建议的最优文件夹布置
 WEBAPI
	┌Actions
	│	├OrderGet.cs
	│	├OrderCreate.cs
	├Domains
	│	
	├Requests
	│	├OrderGetRequestDto.cs
	│	├OrderCreateRequestDto.cs
	├Responses
	│	├OrderGetResponseDto.cs
	│	├OrderCreateResponseDto.cs
