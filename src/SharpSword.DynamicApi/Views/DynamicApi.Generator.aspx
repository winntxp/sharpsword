<%@ Page Language="C#" %>

<%@ Assembly Name="SharpSword" %>
<%@ Assembly Name="SharpSword.DynamicApi" %>
<%@ Import Namespace="SharpSword" %>
<%@ Import Namespace="SharpSword.WebApi" %>
<%@ Import Namespace="SharpSword.DynamicApi" %>
<%@ Import Namespace="System.Collections.Specialized" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Web" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Reflection" %>

<script runat="server">
    public ActionResult ActionResult;
    public DynamicApiConfig DynamicApiConfig;
</script>

<%
    //上送对象
    var response = this.ActionResult.Data as DynamicApiDescriptor;

    //接口类
    var className = response.ActionName.Replace(".", "");

    //服务参数名称，首字母小写
    var serviceName = response.DeclaringType.Name[0].ToString().ToLower() + response.DeclaringType.Name.Substring(1, response.DeclaringType.Name.Length - 1);

    //返回对象
    var responseDtoStr = typeof(void) == response.ResponseDtoType ? typeof(NullResponseDto).Name : response.ResponseDtoType.FullName;
    if (response.ResponseDtoType.IsGenericType && response.ResponseDtoType.GetGenericTypeDefinition() == typeof(IEnumerable<>))
    {
        var genericArguments = response.ResponseDtoType.GetGenericArguments();
        responseDtoStr = "{0}<{1}>".With(response.ResponseDtoType.FullName.Split(new char[] { '`' })[0], genericArguments[0].FullName);
    }
    if (response.ResponseDtoType.IsGenericType && response.ResponseDtoType.GetGenericTypeDefinition() == typeof(IDictionary<,>))
    {
        var genericArguments = response.ResponseDtoType.GetGenericArguments();
        responseDtoStr = "{0}<{1},{2}>".With(response.ResponseDtoType.FullName.Split(new char[] { '`' })[0], genericArguments[0].FullName, genericArguments[1].FullName);
    }
%>


/* **************************************************************************
 * <auto-generated>
 *     This code was generated by a tool.
 *     Runtime Version:<%:Environment.Version.Major %>.<%:Environment.Version.Minor %>.<%:Environment.Version.Build %>.<%:Environment.Version.Revision %>
 *     OperatingSystem:<%:Environment.OSVersion %>        
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 * **************************************************************************/
using SharpSword;
using SharpSword.WebApi;
using System;
using System.Collections.Generic;
using System.Linq;
using <%:response.DeclaringType.Namespace %>;

<!--NewLine-->

namespace <%:this.DynamicApiConfig.ActionNameSpace %>
{
    /// <summary>
    /// Assembly    :   <%:response.DeclaringType.Assembly.GetName().Name %>
    /// MethodInfo  :   <%:response.DeclaringType.Name+"."+response.MethodInfo.Name %>
    /// </summary>
    [ActionName("<%:response.ActionName %>")]
    public class <%:className %>Action :
       ActionBase<<%:response.RequestDtoType.FullName %>, <%:responseDtoStr %>>
    {
        /// <summary>
        /// 
        /// </summary>
        private readonly <%:response.DeclaringType.FullName %> _<%:serviceName %>;

<!--NewLine-->
        /// <summary>
        /// 构造函数注入需要的参数
        /// </summary>
        public <%:className %>Action(<%:response.DeclaringType.FullName %> <%:serviceName %>)
        {
            this._<%:serviceName %> = <%:serviceName %>;
        }

<!--NewLine-->

        /// <summary>
        /// 执行业务逻辑
        /// </summary>
        /// <returns></returns>
        public override ActionResult<<%:responseDtoStr %>> Execute()
        {
            <%if (response.ResponseDtoType == typeof(void))
                    { %>

            <%if (response.MethodInfo.GetParameters().Length == 1)
                { %>

            this._<%:serviceName %>.<%:response.MethodInfo.Name %>(this.RequestDto);
            return this.SuccessActionResult();

                        <%}
                else
                { %>
            this._<%:serviceName %>.<%:response.MethodInfo.Name %>();
            return this.SuccessActionResult();

            <%} %>

            <%}
                    else
                    { %>

                        <%if (response.MethodInfo.GetParameters().Length == 1)
                            { %>

            return this.SuccessActionResult(this._<%:serviceName %>.<%:response.MethodInfo.Name %>(this.RequestDto));

                                <%}
                        else
                        { %>

            return this.SuccessActionResult(this._<%:serviceName %>.<%:response.MethodInfo.Name %>());

                        <%} %>



            <%} %>
        }
    }
}


